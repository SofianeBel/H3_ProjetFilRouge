// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Modèle pour les demandes de contact
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  phone     String?
  service   String?  // SOC, Audit, Pentest, CERT
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

// Modèle pour les prises de rendez-vous
model Booking {
  id            String   @id @default(cuid())
  name          String
  email         String
  company       String
  phone         String?
  service       String   // SOC, Audit, Pentest, CERT
  preferredDate DateTime
  message       String?
  status        BookingStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("bookings")
}

// Modèle pour les catégories d'articles
model Category {
  id       String @id @default(cuid())
  name     String @unique
  slug     String @unique
  description String?
  color    String? // Couleur hex pour l'affichage
  
  // Relations
  posts    BlogPost[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// Modèle pour les articles de blog
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String   // Contenu en markdown
  
  // Métadonnées
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  viewCount   Int      @default(0)
  readTime    Int?     // Temps de lecture en minutes
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Images
  coverImage  String? // URL de l'image de couverture
  ogImage     String? // Image pour Open Graph
  
  // Relations
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  tags        String   // Tags JSON pour la recherche
  
  // Dates
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog_posts")
}

// Modèle pour l'inscription newsletter
model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  status    NewsletterStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter")
}

// Modèles NextAuth pour l'authentification admin
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(ADMIN)
  accounts      Account[]
  sessions      Session[]
  blogPosts     BlogPost[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums pour définir les statuts
enum ContactStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum NewsletterStatus {
  ACTIVE
  UNSUBSCRIBED
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}
